@page "/single"
@using ActivationReport.Models
@using Microsoft.EntityFrameworkCore
@using System.Text

<article>
    <h3>Отчёт по компании</h3>

    <p>Список компаний:</p>
    @if (companies != null || companies?.Count == 0)
    {
        <p class="align-items-start">
            @foreach (var company in companies.OrderBy(c => c.Name).ToList())
            {
                <div>
                    <label class="d-block fw-bold">
                        <input type="radio" class="me-2" @onclick="@(() => selectedCompany = company)" id="@company.Id" name="company" />
                        @company.Name
                    </label>
                </div>                           
            }
        </p>  
    }
    else
    {
        <p>Нет компаний в базе данных</p>
    }

    <p class="row justify-content-between">
        <div class="col-4">
            <label>Начало:</label>
            <input type="date" @bind="startDate" />
        </div>
        <div class="col-4">
            <label>Окончание:</label>
            <input type="date" @bind="finishDate" />
        </div>
            <input type="checkbox" id=mail class="btn-check col-3" @bind="sendMail" @onclick="changeSendMail" />
            <label for="mail" class="btn btn-outline-dark col-3">Отправлять на почту</label>
        @if (selectedCompany != null && folderPath != null)
        {
            <button class="btn btn-success col-3" @onclick="createReport">Сформировать отчёт</button>
        }
        else
        {
            <label class="col-3"/>
        }
    </p>

    <p class="row align-items-center">
        <button class="btn btn-primary col-3" @onclick="pickFolder">Выбор папки для отчёта</button>
        @if (folderPath != null)
        {
            <label class="col-6">@folderPath</label>        
            <button class="btn btn-outline-primary col-3" @onclick="() => global::Helpers.OpenFolder(folderPath)">Открыть папку с отчётами</button>
        }
    </p>   
</article>

@code {
    private List<Company>? companies;
    private DateTime startDate = DateTime.Today;
    private DateTime finishDate = DateTime.Today;
    private string? folderPath = Preferences.Default.Get("SingleFolder", "");
    private Company? selectedCompany = null;
    private bool sendMail = Preferences.Default.Get("SendByEmailSingle", false);

    private void changeSendMail()
    {
        sendMail = !sendMail;
        Preferences.Default.Set("SendByEmailSingle", sendMail);
    }

    private async Task pickFolder() => folderPath = await Helpers.PickFolder("SingleFolder");

    private void createReport()
    {
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
        string fullPath = folderPath + "\\" + selectedCompany.Name + ".csv";
        int count = 0;  

        using (var csvWriter = new StreamWriter(new FileStream(fullPath, FileMode.Create, FileAccess.Write, FileShare.Read), Encoding.GetEncoding(1251)))
        {
            csvWriter.WriteLine("\"Карта мастерской\";\"Дата запроса\";\"Дата ответа\";\"Наименование организации\";\"ОГРН\";\"ИНН\";\"Код региона по классификатору\";\"Населённый пункт\";\"Адрес\";\"Марка\";\"Модель\";\"Год выпуска\";\"Цвет\";\"Регистрационный номер\";\"VIN\";\"ПТС\";\"Серийный номер СКЗИ\";\"Серийный номер тахографа\";");
            using(var db = new AppDBContext())
            {
                foreach (var card in selectedCompany.Cards)
                {
                    List<Activation> list;
                    if (selectedCompany.Staff)
                    {
                        list = db.Activations.Where(a => a.ActDate >= startDate.ToUniversalTime() && a.ActDate <= finishDate.AddDays(1.0).ToUniversalTime())
                                             //Where(a => a.CardNumber.Substring(1,16) == card.CardNumber).ToList();
                                             .Where(a => a.CardNumber.Substring(1, 14) == card.CardNumber.Substring(0, 14)).ToList();
                    }
                    else
                    {
                        list = db.Activations.Where(a => a.ActDate >= startDate.ToUniversalTime() && a.ActDate <= finishDate.AddDays(1.0).ToUniversalTime())
                                             .Where(a => a.CompanyId == Convert.ToInt32(card.CardNumber.Substring(3, 10))).ToList();
                    }  

                    foreach (var line in list)
                    {
                        csvWriter.WriteLine(line.ToString());
                    }

                    count += list.Count();
                }
            }            
        }

        try
        {
            File.Move(fullPath, fullPath.Replace(".csv", "_" + count + ".csv"));
        }
        catch (Exception e)
        {
            Application.Current.MainPage.DisplayAlert("Ошибка", "Ошибка переименования файла!", "Ок");
        }

        if (selectedCompany.Email != null && sendMail)
        {
            Services.SendEmail(selectedCompany, fullPath.Replace(".csv", "_" + count + ".csv"));
            Application.Current.MainPage.DisplayAlert("Уведомление", "Отчёт успешно сформирован и отправлен!", "Ок");
        }
        else
        {
            Application.Current.MainPage.DisplayAlert("Уведомление", "Отчёт успешно сформирован!", "Ок");
        }        
    }

    protected override async Task OnInitializedAsync() => companies = Helpers.LoadCompaniesData();
}