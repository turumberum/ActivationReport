@page "/log"
@using System.Text
@using ActivationReport.Models
@using CommunityToolkit.Maui.Views
@using System.Diagnostics

<article>
    <h3>Разбор файла с логом активации</h3>    

    <p class="row align-items-center">
        <button class="btn btn-outline-primary col-3" @onclick="selectFile">Выбрать файл</button>
        @if (filePath != null)
        {
            <label class="col-6 mx-2 fs-6">@filePath</label>
        }
        else
        {
            <label class="col-6 mx-2 fs-6">Файл не выбран!</label>
        }
    </p>

    @if (filePath != null)
    {
        <p class="row justify-content-end">
            <button class="btn btn-primary col-4" @onclick="() => ReadBinaryFile(filePath)">Разобрать файл</button>
        </p>
    }

    @if (filePath != null)
    {
        <p class="row justify-content-start">
            @foreach(var line in lines)
            {
                <div>@line</div>
                <hr />
            }
        </p>
    }

    @if (lines.Count() > 0)
    {
        @* <p class="row align-items-center justify-content-center">
            <button class="btn btn-primary col-3" @onclick="pickFolder">Выбор папки для отчётов</button>
            @if (folderPath != null)
            {
                <label class="col-6">@folderPath</label>
                <button class="btn btn-outline-primary col-3" @onclick="() => global::Helpers.OpenFolder(folderPath)">Открыть папку с отчётами</button>
            }
        </p> *@
        <p class="row justify-content-end">
            <button class="btn btn-primary col-4" @onclick="() => Print()">Сохранить в файл</button>
        </p>
    }
</article>

@code {
    public static string? filePath;
    public static string? folderPath;
    public static List<string> lines = new();

    private async Task pickFolder() => folderPath = await Helpers.PickFolder("LogFolder");

    private async Task selectFile()
    {
        var customFileType = new FilePickerFileType(
                new Dictionary<DevicePlatform, IEnumerable<string>>
                                {
                        { DevicePlatform.WinUI, new[] { ".log" } }, // file extension
                                });

        var response = await FilePicker.PickAsync(new PickOptions
            {
                PickerTitle = "Выберите файл в формате *.log",
                FileTypes = customFileType,
            });

        if (response != null)
            filePath = response.FullPath;
    }

    struct LOGITEM
    {
        uint recNumber;
        uint date;
        uint type;
        short extLength;
        byte[] extData; 
        byte crc;
    }

    struct SKZI_ACTIVATDATE
    {
        char[] nkmVersion;      //16
        byte[] cs_Serial;       //8
        byte[] gnss_Serial;     //8
        byte[] bcd_prodDate;    //6
        byte[] manufacturerName;//36
        byte[] refNumber;       //16
        byte[] partNumber;      //16
    }

    static void ReadBinaryFile(string filePath)
    {
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
        lines.Clear();
        byte computedCRC;
        byte actualCRC;

        using (var fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
        using (var br = new BinaryReader(fs))
        {
            while (fs.Position < fs.Length)
            {
                try
                {
                    int position = 0;
                    // Чтение 1 записи (включая CRC)
                    byte[] record = br.ReadBytes(256);

                    // Стираем CRC (последний байт) для вычисления
                    actualCRC = record[^1];  // Последний байт — это CRC
                    record[^1] = 0;          // "Стираем" CRC

                    // Вычисляем CRC
                    computedCRC = CalculateCRC(record);

                    // 4 байта порядкового номера записи
                    int recordNumber = ReadInt(record, ref position);

                    // 4 байта даты и времени
                    int timestampRaw = ReadInt(record, ref position);
                    DateTime timestamp = DateTimeOffset.FromUnixTimeSeconds(timestampRaw).DateTime;

                    // 4 байта типа события
                    int eventType = ReadInt(record, ref position);

                    // Формируем строку
                    string line = $"№: {recordNumber}, Время: {timestamp}, Тип события: {GetEventName(eventType)}, \n";

                    // 2 байта длины дополнительной информации
                    short additionalInfoLength = ReadShort(record, ref position);

                    // Добавляем доп. информацию по событию
                    switch (eventType)
                    {
                        case 1:
                            break; // номер 0 0 32 32 32 32 32 32 32...
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                            line += $"Номер карты: {ReadCardNumber(ReadBytes(record, ref position, 18))}, ";
                            break;
                        case 7:
                        case 10:
                            line += (ReadByte(record, ref position) == 1 ? "Да, " : "Нет, "); // Проверить
                            break;
                        case 12:
                            line += $"Номер карты: {ReadFixedStringFromByte(record, ref position, 18)}, ";
                            line += $"VIN {ReadFixedStringFromByte(record, ref position, 17)}, ";
                            line += $"Гос.номер {ReadFixedStringFromByte(record, ref position, 15)}, ";
                            line += $"Макс.скорость {br.ReadByte()}, ";
                            break;
                        case 14:
                            line += $"Время отключения питания: {DateTimeOffset.FromUnixTimeSeconds(ReadInt(record, ref position)).DateTime}, ";
                            line += $"Отключение: {(ReadInt(record, ref position) == 0 ? "корректно" : "некоррктно!")}, \n ";

                            //Разбор статуса СКЗИ                            
                            line += $"{GetNKMActivationStatus(ReadByte(record, ref position))}";
                            line += $"{GetNKMStatus(ReadByte(record, ref position))}";
                            line += $"{GetNKMMovementStatus(ReadByte(record, ref position))}";
                            line += $"{GetNKMCardStatus(ReadByte(record, ref position))}";
                            line += $"Дата окончания сертификата: {BcdToDate(ReadBytes(record, ref position, 6))} \n";

                            // Добавляем данные по блоку СКЗИ
                            line += $"Версия: {ReadChars(record, ref position, 16)}, \n";
                            line += $"КП: {ReadFixedStringFromByte(record, ref position, 8)}, ";
                            line += $"ГНСС: {ReadFixedStringFromByte(record, ref position, 8)}, \n";
                            line += $"Дата производства: {BcdToDate(ReadBytes(record, ref position, 6))}, ";
                            line += $"Производитель: {ReadCardString(ReadBytes(record, ref position, 36))}, \n";
                            line += $"Серийный номер: {Encoding.UTF8.GetString(ReadBytes(record, ref position, 16))}, "; //Encoding.UTF8.GetString(br.ReadBytes(16))
                            line += $"Заводской номер: {Encoding.UTF8.GetString(ReadBytes(record, ref position, 16))}, \n";
                            break;
                    }

                    // Пустые символы в конце строки
                    // var otherByte = br.ReadBytes(256 - (15 + additionalInfoLength));

                    // 1 байт CRC
                    //byte crc = br.ReadByte();
                    //line += $"CRC: {actualCRC}";

                    //Проверяем CRC
                    if (computedCRC == actualCRC)
                    {
                        line += " CRC корректно";
                    }
                    else
                    {
                        line += " CRC неверно";
                    }

                    lines.Add(line);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error reading file: {ex.Message}");
                    break;
                }
            }

        }
    }

    static string GetNKMActivationStatus(byte data)
    {
        int[] bits = new int[8];
        string output = "Статус активаци блока СКЗИ: \n";

        for (int i = 0; i < 8; i++)
        {
            bits[7 - i] = (data >> i) & 1; // Сдвигаем и получаем биты с конца
        }

        if (bits[7] == 1)
            output += "Проведена инициализация \n";

        if (bits[6] == 1)
            output += "Загружены сертификаты/квалифицированные сертификаты \n";

        if (bits[5] == 1)
            output += "Проведена активация тахографа \n";

        if (bits[4] == 1)
            output += "Проведена активация транспортного средства \n";

        if (bits[3] == 1)
            output += "НКМ заблокирован\n";

        return output;
    }

    static string GetNKMStatus(byte data)
    {
        int[] bits = new int[8];
        string output = "Состояние оборудования: \n";

        for (int i = 0; i < 8; i++)
        {
            bits[7 - i] = (data >> i) & 1; // Сдвигаем и получаем биты с конца
        }

        output += "ГНСС: "          + (bits[7] == 1 ? "готов\n" : "не готов\n");
        output += "КС: "            + (bits[6] == 1 ? "готов\n" : "не готов\n");
        output += "Акселерометр: "  + (bits[5] == 1 ? "готов\n" : "не готов\n");
        output += "Архив НКМ: "     + (bits[4] == 1 ? "готов\n" : "не готов\n");
        output += "НКМ: "           + (bits[3] == 1 ? "готов\n" : "не готов\n");

        return output;
    }

    static string GetNKMMovementStatus(byte data)
    {
        int[] bits = new int[8];
        string output = "Состояние движения по данным от тахографа: \n";

        for (int i = 0; i < 8; i++)
        {
            bits[7 - i] = (data >> i) & 1; // Сдвигаем и получаем биты с конца
        }

        output += "Движение: "      + (bits[7] == 1 ? "да\n" : "нет\n");
        output += "Паром/поезд: "   + (bits[6] == 1 ? "да\n" : "нет\n");
        output += "Непременимо: "   + (bits[5] == 1 ? "да\n" : "нет\n");

        output += "Состояние движения по данным от акселерометра: \n";

        if (bits[4] == 1)
        {
            output += "Накопление информации\n";
        }
        else if (bits[3] == 0)
        {
            output += "Состояние работы не определено\n";
        }
        else if (bits[2] == 1)
        {
            output += "Движение: " + (bits[2] == 1 ? "да\n" : "нет\n");
        }       

        return output;
    }

    static string GetNKMCardStatus(byte data)
    {
        int[] bits = new int[8];
        string output = "";

        for (int i = 0; i < 8; i++)
        {
            bits[7 - i] = (data >> i) & 1; // Сдвигаем и получаем биты с конца
        }

        output += "Аутентификация карты в слоте 1: "    + (bits[7] == 1 ? "да\n" : "нет\n");
        output += "Аутентификация карты в слоте 2: "    + (bits[6] == 1 ? "да\n" : "нет\n");
        output += "Вставлена карта в слот 1: "          + (bits[5] == 1 ? "да\n" : "нет\n");
        output += "Вставлена карта в слот 2: "          + (bits[4] == 1 ? "да\n" : "нет\n");
        // output += "Аутентификация карты в слоте 3: "    + (bits[3] == 1 ? "да\n" : "нет\n");
        // output += "Вставлена карта в слот 3: "          + (bits[2] == 1 ? "да\n" : "нет\n");
        output += (bits[1] == 1 ? "Сеансовые ключи для удаленного доступа выработаны\n" : "");
        output += (bits[0] == 1 ? "Отладочная версия ПО\n" : "");

        return output;
    }

    static byte CalculateCRC(byte[] record)
    {
        byte crc = 0;
        foreach (var b in record)
        {            
            crc = (byte)(crc + b);
        }
        return crc;
        // Возвращаем только младший байт суммы
        //return (byte)(sum & 0xFF);
    }

    static byte[] ReadBytes(byte[] bytes, ref int position, int lenght) // Метод для чтения произвольного кол-ва байт
    {
        byte[] value = bytes[position..(position+lenght)];
        position += lenght; 
        return value;
    }

    static string ReadChars(byte[] bytes, ref int position, int lenght) // Метод для чтения произвольного кол-ва char
    {
        StringBuilder sb = new StringBuilder();
        int maxPosition = position + lenght;
        while (position < maxPosition)
        {
            byte b = bytes[position++];
            sb.Append((char)b);
        }

        return sb.ToString().TrimEnd('\0');
    }

    static int ReadInt(byte[] bytes, ref int position) // Метод для чтения int (4 байта)
    {
        int value = BitConverter.ToInt32(bytes, position);
        position += 4; // Смещаем позицию на 4 байта
        return value;
    }

    static short ReadShort(byte[] bytes, ref int position) // Метод для чтения short (2 байта)
    {
        short value = BitConverter.ToInt16(bytes, position);
        position += 2; // Смещаем позицию на 2 байта
        return value;
    }

    static byte ReadByte(byte[] bytes, ref int position) // Метод для чтения одного байта
    {
        byte value = bytes[position];
        position += 1; // Смещаем позицию на 1 байт
        return value;
    }

    static string ReadFixedStringFromByte(byte[] bytes, ref int position, int length) // Метод для чтения строки фиксированного размера
    {
        byte[] buffer = new byte[length];
        Array.Copy(bytes, position, buffer, 0, length);
        position += length;

        var test = Encoding.UTF8.GetString(buffer);
        // Убираем нулевые символы и преобразуем в строку
        return BitConverter.ToString(buffer).Replace("-", "").TrimEnd('\0');
    }

    static string ReadCardString(byte[] bytes)
    {
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

        int codePage = bytes[0];
        //+codePage.ToString()
        return Encoding.GetEncoding("iso-8859-5").GetString(bytes, 1, 35).TrimEnd('\0');
    }

    static string ReadCardNumber(byte[] bytes)
    {
        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

        int codePage = (int)bytes[1] - 40;
        string output = "";
        // switch (bytes[0])
        // {
        //     case 0:
        //         output += "0";
        //         break;
        // }
        output += Encoding.GetEncoding("iso-8859-" + codePage.ToString()).GetString(bytes, 2, 16).TrimEnd('\0');
        return output;
    }

    static string BcdToDate(byte[] bcd)
    {
        if (bcd.Length != 6)
            throw new ArgumentException("Date field must be 6 bytes long.");

        // Конвертируем каждую пару BCD в читаемую дату
        int year = BcdToInt(bcd[0]) + 2000; // Предполагаем, что год после 2000
        int month = BcdToInt(bcd[1]);
        int day = BcdToInt(bcd[2]);
        int hour = BcdToInt(bcd[3]);
        int minute = BcdToInt(bcd[4]);
        int second = BcdToInt(bcd[5]);

        // Форматируем дату в виде строки
        return $"{day:D2}.{month:D2}.{year:D4} {hour:D2}:{minute:D2}:{second:D2}";
    }

    static int BcdToInt(byte bcd)
    {
        // Преобразует один байт BCD в целое число
        return ((bcd >> 4) * 10) + (bcd & 0x0F);
    }

    private static string GetEventName(int eventType)
    {
        var names = new Dictionary<int, string>()
        {
            {1,  "Установка карты в слот 1"},               // __lrtCardInsertReader1 = 1,
            {2,  "Установка карты в слот 2"},               // __lrtCardInsertReader2 = 2,
            {3,  "Карта в слоте 1 готова к активации"},     // __lrtCard1ReadyToAct = 3,
            {4,  "Карта в слоте 2 готова к активации"},     // __lrtCard2ReadyToAct = 4,
            {5,  "Аутентифкация карты в слоте 1"},          // __lrtCard1AuthOk = 5,
            {6,  "Аутентифкация карты в слоте 2"},          // __lrtCard2AuthOk = 6,
            {7,  "Выбор использования блока СКЗИ"},         // __lrtNKMDoActYes_No     =7,
            {8,  "Выполнена подпись запроса на активацию"}, // __lrtNKMDoSignStep1 = 8,
            {9,  "Переход блока СКЗИ на ШАГ2"},             // __lrtNKMGoToStep2 = 9,
            {10, "Выбрана загрузка сертифката"},            // __lrtNKMSelectLoadCerts = 10,
            {11, "Загрузка сертифката"},                    // __lrtNKMDoLoadCerts = 11,
            {12, "Активация ТС в блоке СКЗИ"},              // __lrtNKMDoVehclActivate = 12,
            {13, "Сброс на ШАГ1"},                          // __lrtNKMResetToStep1 = 13,
            {14, "Включение питания СКЗИ"},                 // __lrtNKMPowerON = 14,
            //{15, "Извлечение карты"},             //
            //{16, "Перезагрузка"},                 //
            //{17, "Ошибка выполнения запроса"},    //
        };

        return names[eventType];
    }

    static void Print()
    {
        var pdfService = new PdfService();
        pdfService.CreatePdfFromList(lines, filePath.Replace(".log", ".pdf"));
    }
}