@page "/database"
@using System.Text
@using ActivationReport.Models
@using CommunityToolkit.Maui.Views
@using System.Diagnostics

<article>
    <h3>Управление базой данных</h3>

    <p class="row align-items-center">
        <label class="col-3">Количество записей в БД</label>
        <button class="btn btn-outline-primary col-2" @onclick="countDatabaseEntries">Посчитать</button>
        @if (baseCount != null)
        {
            <label class="col-6 mx-2 fs-6"> Количество записей: @baseCount, c: @baseDateFirst до: @baseDateLast</label>
        }
    </p>

    <p class="row align-items-center">
        <label class="col-3">Запросить файл</label>
        <button class="btn btn-outline-primary col-2" @onclick="loadFromAtlas">Запрос на портал</button>

        @if (LoadingStatus == 1)
        {
            <label class="col-3">Загружаю данные</label>
        }

        @if (LoadingStatus == 2)
        {
            <label class="col-3">Данные загружены</label>
        }        
    </p>

    <p class="row align-items-center">
        <label class="col-3">Файл для загрузки в базу данных</label>
        <button class="btn btn-outline-primary col-2" @onclick="selectFile">Выбрать файл</button>
        @if (filePath != null)
        {
            <label class="col-6 mx-2 fs-6">@filePath</label>
        }
        else
        {
            <label class="col-2 mx-2 fs-6">Файл не выбран!</label>
        }
    </p>

    @if (filePath != null)
    {
        <p class="row justify-content-end">
            <button class="btn btn-primary col-4" @onclick="() => fileUpload()">Загрузить в базу данных</button>
        </p>
    }
</article>

@code {
    public static string? filePath;
    private static string? baseCount;
    private static string? baseDateFirst;
    private static string? baseDateLast;
    public static int LoadingStatus = 0;

    private async Task selectFile()
    {
        var customFileType = new FilePickerFileType(
                new Dictionary<DevicePlatform, IEnumerable<string>>
                                {
                        { DevicePlatform.WinUI, new[] { ".csv" } }, // file extension
                                });

        var response = await FilePicker.PickAsync(new PickOptions
            {
                PickerTitle = "Pick CSV file",
                FileTypes = customFileType,
            });

        if (response != null)
            filePath = response.FullPath;
    }

    private void loadFromAtlas()
    {
        string startDate;
        string endDate = DateTime.Today.ToShortDateString();


        using (var db = new AppDBContext())
        {
            startDate = db.Activations.OrderBy(a => a.ActDate).Last().ActDate.ToShortDateString();
        }

        if (startDate.Equals(endDate) || startDate.Equals(DateTime.Today.AddDays(-1).ToShortDateString()))
        {
            Application.Current.MainPage.DisplayAlert("Уведомление", "Обновление базы не требуется", "Ок");
        } 
        else
        {
            Thread myThread = new Thread(() => Services.AtlasRequest(startDate, endDate));
            Debug.WriteLine("Старт потока");
            myThread.Start();            
        }        
    }

    private void countDatabaseEntries()
    {
        using (var db = new AppDBContext())
        {
            baseCount = db.Activations.Count().ToString();
            baseDateFirst = db.Activations.OrderBy(a => a.ActDate).First().ActDate.ToShortDateString();
            baseDateLast = db.Activations.OrderBy(a => a.ActDate).Last().ActDate.ToShortDateString();
        }
    }

    private void fileUpload()
    {
        Thread myThread = new Thread(() => Services.ParseAndLoad(filePath));
        Debug.WriteLine("Старт потока");
        Debug.WriteLine(filePath);
        myThread.Start();
    }
}