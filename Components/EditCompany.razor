@using ActivationReport.Models
@using System.ComponentModel.DataAnnotations

<article>
    @if (ECompany.Id > 1)
    {
        <h4>Редактирование данных компании</h4>
    } 
    else
    {
        <h4>Создание новой компании</h4>
    }
    
    <EditForm Model="@ECompany" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
       
        <p class="row">
            <label class="col-2">Название компании</label>
            <InputText @bind-Value="ECompany.Name" class="col-8"/>
        </p>
        <p class="row">   
            <label class="col-2">Трудоустроен к нам</label>
            <InputCheckbox @bind-Value="ECompany.Staff" class="col-1" />
        </p>
        <p class="row">
            <label class="col-2">Ежемесячный отчёт</label>
            <InputCheckbox @bind-Value="ECompany.MonthlyReport" class="col-1" />
        </p>
        <p class="row">
            @if (ECompany.Cards != null && ECompany.Cards.Count > 0)
            {
                <p>Список карт:</p>
                @foreach (var card in ECompany.Cards)
                {
                    <p>
                        <InputText class="col-3" @bind-Value="@card.CardNumber"/>
                        <button type="button" class="btn btn-close col-1" @onclick="() => ECompany.Cards.Remove(card)" />
                    </p>
                }    
            }
            else
            {
                <p>Карты не указаны</p>
            }

        <button type="button" class="btn btn-outline-success col-3 ms-2" @onclick="() => ECompany.Cards.Add(new Card())">Добавить новую карту</button>
        </p>

        <ValidationSummary />
        <p class="row justify-content-end">
            <button type="submit" class="btn btn-primary col-3 me-2">Сохранить изменения</button>
            <button class="btn btn-danger col-2 me-2" @onclick="cancelled">Отмена</button>
        </p>
    </EditForm>
</article>


@code {
    [Parameter]
    public bool Edit { get; set; }
    [Parameter]
    public EventCallback<bool> EditChanged { get; set; }
    [Parameter]
    public Company ECompany { get; set; }
    [Parameter]
    public EventCallback<Company> ECompanyChanged { get; set; }

    private List<string> validationMessages = new List<string>();

    private async Task cancelled()
    {
        await ECompanyChanged.InvokeAsync(new Company
                                                    {
                                                        Cards = new List<Card>()
                                                    });
        await EditChanged.InvokeAsync(false);
    }

    private void saveCompany()
    {
        using (var db = new AppDBContext())
        {
            db.Companies.Add(ECompany);
            db.SaveChanges();
        }
        cancelled();
    }

    private void updateCompany()
    {
        using (var db = new AppDBContext())
        {
            db.Companies.Update(ECompany);
            db.SaveChanges();
        }
        cancelled();
    }

    private void HandleValidSubmit()
    {
        var context = new ValidationContext(ECompany);
        var validationResults = new List<ValidationResult>();

        // Проверяем валидность основной модели
        bool isValid = Validator.TryValidateObject(ECompany, context, validationResults, true);

        // Проверяем валидность каждой карточки в списке
        foreach (var card in ECompany.Cards)
        {
            context = new ValidationContext(card);
            isValid &= Validator.TryValidateObject(card, context, validationResults, true);
        }

        if (isValid)
        {
            if (ECompany.Id > 1)
            {
                updateCompany();
            }
            else
            {
                saveCompany();
            }
        }
        else
        {
            // Обновляем сообщения валидации
            validationMessages.Clear();
            foreach (var validationResult in validationResults)
            {
                validationMessages.Add(validationResult.ErrorMessage);
            }
        }
    }
}